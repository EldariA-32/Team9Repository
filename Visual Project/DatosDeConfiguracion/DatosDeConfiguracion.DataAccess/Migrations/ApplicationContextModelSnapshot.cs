// <auto-generated />
using System;
using DatosDeConfiguracion.DataAccess.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DatosDeConfiguracion.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.27");

            modelBuilder.Entity("DatosDeConfiguracion.Domain.Entities.Fase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Duracion")
                        .HasColumnType("REAL");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OperacionId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OperacionId");

                    b.ToTable("Fases");
                });

            modelBuilder.Entity("DatosDeConfiguracion.Domain.Entities.Operacion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RecetaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Unidad")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RecetaId");

                    b.ToTable("Operaciones");
                });

            modelBuilder.Entity("DatosDeConfiguracion.Domain.Entities.Producto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Empresa")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Envase")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("DatosDeConfiguracion.Domain.Entities.Receta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExpertoValidacion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaValidacion")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.ToTable("Recetas");
                });

            modelBuilder.Entity("DatosDeConfiguracion.Domain.Entities.Fase", b =>
                {
                    b.HasOne("DatosDeConfiguracion.Domain.Entities.Operacion", "Operacion")
                        .WithMany("Fases")
                        .HasForeignKey("OperacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("DatosDeConfiguracion.Domain.ValueObjects.AccionDeControl", "AccionesDeControl", b1 =>
                        {
                            b1.Property<Guid>("AccionId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("FaseId")
                                .HasColumnType("TEXT");

                            b1.Property<double>("Magnitud")
                                .HasColumnType("REAL");

                            b1.Property<string>("Nombre")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("UnidadMedida")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("AccionId", "FaseId");

                            b1.HasIndex("FaseId");

                            b1.ToTable("AccionDeControl");

                            b1.WithOwner("Fase")
                                .HasForeignKey("FaseId");

                            b1.Navigation("Fase");
                        });

                    b.Navigation("AccionesDeControl");

                    b.Navigation("Operacion");
                });

            modelBuilder.Entity("DatosDeConfiguracion.Domain.Entities.Operacion", b =>
                {
                    b.HasOne("DatosDeConfiguracion.Domain.Entities.Receta", "Receta")
                        .WithMany("Operaciones")
                        .HasForeignKey("RecetaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receta");
                });

            modelBuilder.Entity("DatosDeConfiguracion.Domain.Entities.Receta", b =>
                {
                    b.HasOne("DatosDeConfiguracion.Domain.Entities.Producto", "Producto")
                        .WithMany("Receta")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("DatosDeConfiguracion.Domain.Entities.Operacion", b =>
                {
                    b.Navigation("Fases");
                });

            modelBuilder.Entity("DatosDeConfiguracion.Domain.Entities.Producto", b =>
                {
                    b.Navigation("Receta");
                });

            modelBuilder.Entity("DatosDeConfiguracion.Domain.Entities.Receta", b =>
                {
                    b.Navigation("Operaciones");
                });
#pragma warning restore 612, 618
        }
    }
}
